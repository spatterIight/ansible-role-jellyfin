---

# Project source code URL: https://github.com/jellyfin/jellyfin

jellyfin_enabled: true

jellyfin_identifier: jellyfin

jellyfin_uid: ''
jellyfin_gid: ''
jellyfin_timezone: 'Etc/UTC'

jellyfin_version: 10.10.7
jellyfin_arch: amd64

# The hostname at which jellyfin is served.
jellyfin_hostname: ''

# The path at which jellyfin is served.
# This value must either be `/` or not end with a slash (e.g. `/jellyfin`).
jellyfin_path_prefix: /

# Valid settings for 'jellyfin_version_environment_variable' are:
#
# 1. docker: Let Docker handle the Jellyfin Version, we keep our Dockerhub Endpoint up to date with the latest public builds.
# 2. latest: will update jellyfin to the latest version available that you are entitled to.
# 3. public: will update jellyfinpass users to the latest public version, useful for jellyfinpass users that don't want to be on the bleeding edge but still want the latest public updates.
# 4. <specific-version>: will select a specific version (eg 0.9.12.4.1192-9a47d21) of jellyfin to install, note you cannot use this to access jellyfinpass versions if you do not have jellyfinpass.
#
# NOTE -> You cannot update to a JellyfinPass only (beta) version if you are not logged in with a JellyfinPass account
# NOTE -> You must set 'jellyfin_container_read_only' to false if you set a value that is not 'docker'
# https://github.com/linuxserver/docker-jellyfin#application-setup
jellyfin_version_environment_variable: docker

# Controls whether the container filesystem is read-only
# To enable runtime update of Jellyfin (and thus Jellyfinpass builds) this value must be false
jellyfin_container_read_only: true

# The path where the Intel/AMD GPU is on the host system
# For NVIDIA GPUs see 'jellyfin_nvidia_visible_devices' and 'jellyfin_container_runtime'
# https://docs.linuxserver.io/images/docker-jellyfin/#intelatiamd
jellyfin_gpu_path: "/dev/dri"

# The path to mount the Intel/AMD GPU to in the container.
# Takes a path value (e.g. "/dev/dri"), or empty string to not mount.
jellyfin_gpu_bind_path: ""

# Since the container is NOT run in 'host' networking mode
# it is required that a claim token be provided during first time setup
#
# Link to obtain -> https://jellyfin.tv/claim
# Keep in mind that the claim token expires after 4 minutes.
jellyfin_claim_token: ""

# The container runtime that the container engine should use
# Should be set to 'nvidia' to enable NVIDIA GPU hardware acceleration,
# NOTE -> Requires that the https://github.com/NVIDIA/nvidia-container-toolkit is installed
#
# If blank the default runtime is used
# https://docs.linuxserver.io/images/docker-jellyfin/#nvidia
jellyfin_container_runtime: ""

# To enable NVIDIA GPU hardware acceleration this value should either be 'all' or the UUID value of the GPU
# which can obtained with the command -> 'nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv'
#
# https://docs.linuxserver.io/images/docker-jellyfin/#nvidia
jellyfin_nvidia_visible_devices: ""

jellyfin_base_path: "{{ jellyfin_identifier }}"
jellyfin_data_path: "{{ jellyfin_base_path }}/data"

# The path where media files are stored on the host system
jellyfin_media_path: "{{ jellyfin_base_path }}/media"

# The path at which jellyfin_media_path is mounted to inside the container
# Takes a path value (e.g. "/media"), or empty string to not mount.
jellyfin_media_bind_path: ""

jellyfin_container_image: "{{ jellyfin_container_image_registry_prefix }}linuxserver/jellyfin:{{ jellyfin_container_image_tag }}"
jellyfin_container_image_tag: "{{ jellyfin_version }}"
jellyfin_container_image_registry_prefix: lscr.io/
jellyfin_container_image_force_pull: "{{ jellyfin_container_image.endswith(':latest') }}"

# The base container network. It will be auto-created by this role if it doesn't exist already.
jellyfin_container_network: "{{ jellyfin_identifier }}"

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
jellyfin_container_additional_networks: "{{ (jellyfin_container_additional_networks_default + jellyfin_container_additional_networks_auto + jellyfin_container_additional_networks_custom) | unique }}"
jellyfin_container_additional_networks_default: []
jellyfin_container_additional_networks_auto: []
jellyfin_container_additional_networks_custom: []

# Controls how long to wait for the container to stop gracefully before killing it.
# Because `devture_systemd_docker_base_container_stop_grace_time_seconds` may be quite short and databases are more important to stop gracefully,
# we default to at least 30 seconds.
jellyfin_container_stop_grace_time_seconds: "{{ [devture_systemd_docker_base_container_stop_grace_time_seconds, 30] | max }}"

# List of systemd services that the Jellyfin systemd service depends on
jellyfin_systemd_required_services_list: "{{ (jellyfin_systemd_required_services_list_default + jellyfin_systemd_required_services_list_auto + jellyfin_systemd_required_services_list_custom) | unique }}"
jellyfin_systemd_required_services_list_default: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"
jellyfin_systemd_required_services_list_auto: []
jellyfin_systemd_required_services_list_custom: []

# List of systemd services that the Jellyfin systemd service wants
jellyfin_systemd_wanted_services_list: "{{ (jellyfin_systemd_wanted_services_list_default + jellyfin_systemd_wanted_services_list_auto + jellyfin_systemd_wanted_services_list_custom) | unique }}"
jellyfin_systemd_wanted_services_list_default: []
jellyfin_systemd_wanted_services_list_auto: []
jellyfin_systemd_wanted_services_list_custom: []

# For information on all the ports Jellyfin may use, and what they do, see the below docs
# https://github.com/linuxserver/docker-jellyfin#optional-parameters

# The port Jellyfin is serving the HTTP web application on inside the container
jellyfin_container_http_port: 8096

# Controls whether the container exposes the HTTP port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:8096"), or empty string to not expose.
jellyfin_container_http_bind_port: ""

# The port Jellyfin is serving the DLNA server on inside the container
jellyfin_container_dlna_udp_port: 1900

# Controls whether the container exposes the DLNA UDP port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:1900"), or empty string to not expose.
jellyfin_container_dlna_udp_bind_port: ""

# The port Jellyfin is serving the DLNA server on inside the container
jellyfin_container_dlna_tcp_port: 32469

# Controls whether the container exposes the 32469 TCP port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:32469"), or empty string to not expose.
jellyfin_container_dlna_tcp_bind_port: ""

# The port Jellyfin is serving the Bonjour/Avahi server on inside the container
jellyfin_container_bonjour_port: 5353

# Controls whether the container exposes the Bonjour/Avahi port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:5353"), or empty string to not expose.
jellyfin_container_bonjour_bind_port: ""

# The port Jellyfin is serving the 'Jellyfin for Roku via Jellyfin Companion' server on inside the container
jellyfin_container_roku_port: 8324

# Controls whether the container exposes the 'Jellyfin for Roku via Jellyfin Companion' port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:8324"), or empty string to not expose.
jellyfin_container_roku_bind_port: ""

# The port Jellyfin is serving the 'GDM network discovery' server on inside the container
jellyfin_container_gdm_port_01: 32410

# Controls whether the container exposes the 'GDM network discovery' port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:32410"), or empty string to not expose.
jellyfin_container_gdm_bind_port_01: ""

# The port Jellyfin is serving the 'GDM network discovery' server on inside the container
jellyfin_container_gdm_port_02: 32412

# Controls whether the container exposes the 'GDM network discovery' port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:32412"), or empty string to not expose.
jellyfin_container_gdm_bind_port_02: ""

# The port Jellyfin is serving the 'GDM network discovery' server on inside the container
jellyfin_container_gdm_port_03: 32413

# Controls whether the container exposes the 'GDM network discovery' port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:32413"), or empty string to not expose.
jellyfin_container_gdm_bind_port_03: ""

# The port Jellyfin is serving the 'GDM network discovery' server on inside the container
jellyfin_container_gdm_port_04: 32414

# Controls whether the container exposes the 'GDM network discovery' port
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:32414"), or empty string to not expose.
jellyfin_container_gdm_bind_port_04: ""

# To inject your own other container labels, see `jellyfin_container_labels_additional_labels`.
jellyfin_container_labels_traefik_enabled: true
jellyfin_container_labels_traefik_docker_network: "{{ jellyfin_container_network }}"
jellyfin_container_labels_traefik_hostname: "{{ jellyfin_hostname }}"
# The path prefix must either be `/` or not end with a slash (e.g. `/jellyfin`).
jellyfin_container_labels_traefik_path_prefix: "{{ jellyfin_path_prefix }}"
jellyfin_container_labels_traefik_rule: "Host(`{{ jellyfin_container_labels_traefik_hostname }}`){% if jellyfin_container_labels_traefik_path_prefix != '/' %} && PathPrefix(`{{ jellyfin_container_labels_traefik_path_prefix }}`){% endif %}"
jellyfin_container_labels_traefik_priority: 0
jellyfin_container_labels_traefik_entrypoints: web-secure
jellyfin_container_labels_traefik_tls: "{{ jellyfin_container_labels_traefik_entrypoints != 'web' }}"
jellyfin_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# jellyfin_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# jellyfin_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
jellyfin_container_labels_additional_labels: ''

# jellyfin_container_additional_environment_variables contains a multiline string with additional environment variables to pass to the container.
#
# Example:
# jellyfin_container_additional_environment_variables: |
#   VAR=1
#   ANOTHER=value
jellyfin_container_additional_environment_variables: ''

# A list of additional "volumes" to mount in the container.
#
# See the `--mount` documentation for the `docker run` command.
#
# Example:
# jellyfin_container_additional_volumes:
#   - type: bind
#     src: /path/on/the/host
#     dst: /data
#   - type: bind
#     src: /another-path/on/the/host
#     dst: /read-only
#     options: readonly
jellyfin_container_additional_volumes: []

# A list of extra arguments to pass to the container
jellyfin_container_extra_arguments: []
